// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  emailVerified DateTime?
  name          String?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  accounts      Account[]
  sessions      Session[]
  projects      Project[]
  subscription  Subscription?
  aiUsage       AIUsage[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Project {
  id          String   @id @default(cuid())
  name        String
  description String   @db.Text
  novelType   String   @default("medium")
  userId      String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chapters    Chapter[]
  characters  Character[]
  settings    ProjectSettings?
  
  @@index([userId])
}

model ProjectSettings {
  id              String   @id @default(cuid())
  projectId       String   @unique
  writingRules    Json
  worldSettings   Json
  aiSettings      Json
  
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
}

model Chapter {
  id              String   @id @default(cuid())
  projectId       String
  number          Int
  title           String
  type            String
  targetLength    Int
  content         String   @db.Text
  summary         String?  @db.Text
  status          String   @default("draft")
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
  @@unique([projectId, number])
}

model Character {
  id              String   @id @default(cuid())
  projectId       String
  name            String
  role            String
  age             String?
  gender          String?
  personality     String   @db.Text
  background      String   @db.Text
  appearance      String?  @db.Text
  goals           String?  @db.Text
  relationships   Json?
  notes           String?  @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  project         Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  @@index([projectId])
}

model Subscription {
  id                     String    @id @default(cuid())
  userId                 String    @unique
  stripeCustomerId       String    @unique
  stripeSubscriptionId   String?   @unique
  stripePriceId          String?
  stripeCurrentPeriodEnd DateTime?
  plan                   String    @default("free") // free, pro, enterprise
  status                 String    @default("active") // active, canceled, past_due
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  
  user                   User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([stripeCustomerId])
  @@index([stripeSubscriptionId])
}

model AIUsage {
  id               String   @id @default(cuid())
  userId           String
  chapterGenCount  Int      @default(0)  // 章生成回数
  periodStart      DateTime @default(now()) // 期間開始日
  periodEnd        DateTime // 期間終了日（通常は翌月同日）
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([userId, periodStart])
  @@index([userId])
  @@index([periodEnd])
}